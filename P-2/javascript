// ===== Dashboard Core Module =====
const Dashboard = (() => {
  // State Management
  let state = {
    projects: [],
    announcements: [],
    trending: [],
    user: null,
    notifications: []
  };

  // DOM Cache
  const DOM = {
    projectGrid: document.querySelector('.project-grid'),
    announcementContainer: document.querySelector('.announcement-card'),
    trendingContainer: document.querySelector('.trending-items'),
    searchInput: document.querySelector('.search-bar input'),
    notificationIcon: document.querySelector('.user-info .material-icons')
  };

  // ===== Data Layer =====
  const API = {
    async fetchInitialData() {
      const [projects, announcements, trending] = await Promise.all([
        fetch('/api/projects').then(res => res.json()),
        fetch('/api/announcements').then(res => res.json()),
        fetch('/api/trending').then(res => res.json())
      ]);
      return { projects, announcements, trending };
    },

    async postProject(project) {
      return fetch('/api/projects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(project)
      });
    }
  };

  // ===== Template Engine =====
  const Templates = {
    projectCard(project) {
      return `
        <article class="project-card" data-id="${project.id}">
          <h3>${project.title}</h3>
          <p>${project.description}</p>
          <div class="project-actions">
            ${project.stats.stars} <span class="material-icons">star</span>
            ${project.stats.views} <span class="material-icons">visibility</span>
            <span class="material-icons share-btn">share</span>
          </div>
        </article>
      `;
    },

    announcementItem(announcement) {
      return `
        <article class="announcement">
          <h4>${announcement.title}</h4>
          <p>${announcement.excerpt}</p>
          <time>${new Date(announcement.date).toLocaleDateString()}</time>
        </article>
      `;
    }
  };

  // ===== Event Handlers =====
  const handleSearch = debounce(async (e) => {
    const query = e.target.value;
    const results = await fetch(`/api/search?q=${query}`);
    updateProjectGrid(results);
  }, 300);

  const handleProjectInteraction = (e) => {
    const card = e.target.closest('.project-card');
    if (!card) return;
    
    const projectId = card.dataset.id;
    if (e.target.classList.contains('share-btn')) {
      showShareModal(projectId);
    }
  };

  // ===== Core Functions =====
  function updateProjectGrid(projects) {
    DOM.projectGrid.innerHTML = projects.map(Templates.projectCard).join('');
    addProjectEventListeners();
  }

  function addProjectEventListeners() {
    DOM.projectGrid.addEventListener('click', handleProjectInteraction);
  }

  function initRealTimeUpdates() {
    const eventSource = new EventSource('/api/updates');
    eventSource.onmessage = (e) => {
      const data = JSON.parse(e.data);
      state = { ...state, ...data };
      renderUpdates(data);
    };
  }

  // ===== Public API =====
  return {
    async init() {
      try {
        const data = await API.fetchInitialData();
        state = { ...state, ...data };
        
        updateProjectGrid(state.projects);
        DOM.searchInput.addEventListener('input', handleSearch);
        initRealTimeUpdates();
        
        // WebSocket for notifications
        const ws = new WebSocket('wss://dashboard.example.com/notifications');
        ws.onmessage = (message) => {
          state.notifications.push(JSON.parse(message.data));
          updateNotificationBadge();
        };
        
      } catch (error) {
        console.error('Dashboard initialization failed:', error);
        showErrorModal();
      }
    }
  };
})();

// ===== Charting Module ===== 
const DashboardCharts = (() => {
  const initProjectCharts = () => {
    const ctx = document.getElementById('projectStatsChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: { /* ... */ },
      options: { responsive: true, maintainAspectRatio: false }
    });
  };

  return { initProjectCharts };
})();

// ===== Startup Sequence =====
document.addEventListener('DOMContentLoaded', () => {
  Dashboard.init();
  DashboardCharts.initProjectCharts();
});